plugins {
    id "jacoco"
    id "java-gradle-plugin"
    id "com.gradle.plugin-publish" version "0.16.0"

    id "org.sonarqube" version "3.3"
    id "com.diffplug.spotless" version "5.14.3"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

group = groupId
version = artifactVersion

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

spotless {
    java {
        encoding("UTF-8")
        importOrder()
        removeUnusedImports()
        eclipse().configFile("${projectDir}/config/codestyle.xml")
    }
}

gradlePlugin {
    plugins {
        graalvmTypeHintPlugin {
            id = pluginId
            implementationClass = 'io.gradle.graalvm.typehint.GraalVMTypeHintPlugin'
        }
    }
}

dependencies {
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.7.2"
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.7.2"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.7.2"
}

test {
    useJUnitPlatform()
    testLogging {
        events("passed", "skipped", "failed")
        exceptionFormat("full")
    }

    reports {
        html.enabled(false)
        junitXml.enabled(false)
    }
}

pluginBundle {
    website = 'https://goodforgod.dev/'
    vcsUrl = 'https://github.com/GoodforGod/graalvm-typehint-plugin'
    description = 'Gradle Plugins for GraalVM TypeHints'
    tags = ['graalvm']

    plugins {
        graalvmTypeHintPlugin {
            displayName = 'GraalVM TypeHint Plugin'
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.incremental = true
    options.fork = true
}

java {
    withJavadocJar()
    withSourcesJar()
}

check.dependsOn jacocoTestReport
jacocoTestReport {
    reports {
        xml.enabled true
        html.destination file("${buildDir}/jacocoHtml")
    }
}

if (project.hasProperty("signing.keyId")) {
    apply plugin: "signing"
    signing {
        sign publishing.publications.mavenJava
    }
}

javadoc {
    options.encoding = "UTF-8"
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}